compile to object: /home/khorton/Tools/gcc-arm-none-eabi-10.3-2021.10/bin/arm-none-eabi-gcc -c main.c -o main.o

-mcpu=cortex-m4

-mthumb and -marm selects thumb or arm. default is arm

-s stops after compilation proper. No assembler.


Startup
*Copy .data from flash to RAM(SRAM)
*Crate symbols in linker script to set boundaries for different areas of memory
*Uninitialized variables in .bss

.bss vs .data
    .bss stands for block started by symbol. This is for uninitialized data, and not stored in .data to conserve space. Unlike 
.data, .bss doesn't consume flash memory, and has no load address. Must resevre RAM space for .bss by knowing it's size. This
is done in the startup code. Get size from linker script symbol.

Startup file
    Responsible for setting up environment for main function, which obviously means it runs before main. Some part of startup
code is architecture dependent. Also takes care of vector placemnt and stack reinitialization. Also Responsible for .bss and
.data init. 

Linker Scripts
*Linker script is a text file which explains how different sections of object files should be merged to create output file
*Linker and locator combo assigns unique absolute addresses to different seciton of the output file by reffering to address
info mentioned in the linker script
*Linker script also includes the code and data memory address and size info 
*Linker scripts are writeen using the GNU linker command lang
*Must be be supplied at linker phase by using -T option
Common Linker Commands:
*ENTRY-used to set entry point address info in the header of final elf file. In our case, Reset_Handler()
    Syntax: Entry(_symbol_name_)

*MEMORY-describes different types of memories, locations and sizes of said memories.
    Syntax: MEMORY
    {
        name(attr):ORIGIN=origin,LENGTH=len
    }
    *attr=symbols describe functionality of memory, like R for read-only, W for read and write, and X for exectuable
    *origin=address of memory region
    *len=length of the memory section
*SECTIONS-instructs the linker how ot merge the input sections. Also control order in which different output section appear in
elf file. Also mention the placement of a section in memory region.
*KEEP
*ALIGN
*AT>

*Location Counter(.)-updates this symbol with address. Used inside linker scrits to track and define boundaries. Only appearfs
    in SECTIONS counter.

When a final Elf file is generated, a Symbol Table is created. A Symbol Table matches linker symbol names to values. 

In .map files, *fill* is used to 4 byte align data. Linkers will do this automatically UNLESS it's the end of a section. Then
the linker symbol ALIGN(number of words) must be used. ex . = ALIGN(4);

To print out symbols in elf file, run the compiler nm command

Cross Compilation

Download:
    https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads

Add to Path
    export PATH=$PATH:~/Tools/gcc-arm-none-eabi-10-2020-q4-major/bin

Command Line
    Compile, Linker, and Assembler:
        arm-non-eabi-gcc
    Linker:
        arm-none-eabi-ld
    Elf File Analyzer:
        arm-none-eabi-objdump
        arm-none-eabi-readelf
        arm-none-eabi-nm
    Format Converter:
        arm-none-eabi-objcopy
    Assembler:
        arm-none-eabi-as
Flags
     -c = compile only. gcc default is to compile and link
     -S = stop after compilation but does not assemble. output in assembly
     -mcpu=cortex-m4 = machine cpu for cortex m4 
     -march=cortex-m4 = machine architecture
     -mthumb = thumb state
     -marm = ARM state
     -O0 = no optomization
Build Process: preprocessing->compilation->linking: *.c -> *.i -> *.s -> *.o
    *.c = source file
    *.i = input coude
    *.s = assembly
    *.o = object file (opcodes)
    *.elf = executable and linkable format. use objcopy to analyze
    *.bin = binary 
Analyzing .o files
    -main.o is in elf format
    -file format standards describes ways of organizing elemnets like data, read only.
    -objdump flags:
        -h = headers for data
        -d = disassembly(text only)
        -D = disassembly)(all)
Other File Formats
    COFF(Common Object File Format): introduced by Unix system
    AIF(Arm Image Format): Introduced by ARM
    SRECORD: motorola

Code and Data
    Code: instructions stored in the FLASH memory. Read Only 
    Data: varaibles are stored in main memory(RAM). Stored in RAM because it change. Read/Write
    ROM: .text
    RAM: .data .rodata .bss

Linker and Locator
    Use the linker to merge similar sections of different object files and resolve undefined symbols.
Locator, which is part of linker, takes the help of the linker script to understand how you wish to 
merge different sections. 
    Store final execution(.data .rodata .text) in code(ROM, FLASH). .data is copied to RAM in startup
code. 
    Symbols: _edata, _sdata, _etext

Different Data Sections of a Program(Do more research later)
    Local: local_un_data, local_i_data = local unitialized and initialized.
           local_un_s_data, local_i_s_data = local uinitialized and initialize static data
    Global: global_un_data, global_i_data, global_un_s_data, global_i_s_data
.bss vs data
    .bss = Blocked Started by Symbol. Unitialied static variables and global variable are stored here
    Since these variables do not have intial values, they are not required to be stored in .data. Thye 
would unecissarily consume FLASH. 
    ex. int g_un_data1; == .bss
        static int g_un_data1 == .bss
        int g_i_data = 5; == .data

Startup File Objective
    The startup file is responsible for setting up the right environment for code to run. Startup 
calls main. Also contains targets like vector tables. Takes care of placemnt of this vector table. 
Takes care of stack placement(sometimes). Resonsible for .data and .bss sections. 

1) Setup vector table. 15 exceptions and 82 IRQs multiplied by 4 is 392 bytes
    *create an array to hold MSP and handler's addresses
    *instruct compiler not to include vector array in data section


Linker Scripts 
    *explains how different section of object files should be merged
    *must supply linker script at the linking phase to the linker using -T option
    Commands:
        *ENTRY = set the entry point address info in the header of elf. In this point
        im using the reset handler. Syntax = ENTRY(__symbol__) ex. ENTRY(Reset_Handler)
        *MEMORY = used to describe different memories present in the target and their start
        address. Assign addresses to merged sections. Calculate the total code and data consumed.
        Memmory can fine tune various memories available. Syntax MEMORY {
            name(attr): ORIGIN = origin, LENGTH = len  
            }
        attr = R read only, w read and write, x sections conatining executable code, i initialized
        *SECTIONS = used to create different ouput sections. This command controls the order
        in which different output sections appear in the elf file. Also mention the placement
        of a section in a memory region. For ex. you can instuct the linker to place the
        .text section in the FLASH memory region, which is described byt the MEMORY command.
        Use the wildcard symbol '*' infront of bracket for all files
        *KEEP
        *ALIGN
        *AT>
        *Location counter(.) = updates this symbol with location information. Appears onlu
        in SECTIONS. Incrmented by the size of the output section. Only tacks VMA.  
    A symbol is the name of an address. Symbol declarations are not the same as variables. 
when compiled, compiler assigns things like variables and functions to addresses using a 
Symbol Table. 
    use -Wl,-Map=final.map to generate map file where data placment is displayed. Without ALIGN
symbols, you can cleary see the data isn't aligned. ALIGN() take number of bytes as argument. 

OpenOCD
    STM32 discovery boards have onobaord debugger. Telenet server port 4444, GDB client port 3333. 
 openocd -f /usr/share/openocd/scripts/board/stm32f4discovery.cfg -f /usr/share/openocd/scripts/interface/stlink-v2-1.cfg -c "stm32f4x.cpu configure -rtos ChibiOS"

arm-none-eabi-gbd 
    target remote localhost:3333 = connects to the openocd debugger server
    monitor reset init = 
    monitor flash write_image erase $FILE.elf = flashed file to board. Might show a "cant find file" error
    monitor reset run = resets and runs

    Breakpoints
        monitor halt
        monitor mdw $ADDRESS lenght
        monitor bp $ADDRESS_OF_BP length hw(hardware)
        monitor resume
        monitor run 
        monitor mdw $ADDR length = this shows the value aat address when bp hit
        monitor bp = lists breakpoints
        monitor rbp $ADDR = removes breakpoint at address

Standard Library
    Newlib is a C standard library intended for use on embeded systems. Ships with gnu arm toolchain. 
Includes libc(glibc) ISO C, POSIX, System V. Newlib-nano is used because of less bloat. 
    -located at: ~/Tools/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/lib
    Must impilment system calls. printf() is included with newlib-nano as write(). Must determine where
write is use. UART, LCD etc. Use linker flags: --specs=nano.specs. Make sure there is no -stdlib file 
    In linker, must include *(.text.*) and *(.data.*) and *(.bss.*) to merge sub-sections. 

SemiHosting
    A way to show printf. flags = --specs=rdimon.specs. Do not link syscalls, because semihosting library provides everything.
Commands: 
        target remote localhost:3333
        monitor reset init
        monitor flash write_image erase final_sh.elf
        monitor arm semihosting enable
        monitor reset 
        *will start printing in terminal with openocd


Serial Communication vs Parallel Communication
	In serial communication, like UART, one bit is transferred at a time. In parallel communication, all bits are transferred at the same time. Serial data communication uses two methods; Synchronous (clock is transmitted with the data), and Asynchronous (No clock is transmitted. Transmitter and Receiver agree on the clock speed for the data transmission (Baud Rate)). 

Uart Transmission Modes
Duplex: Data can be transmitted and received
Simplex: Data can be transmitted only or received only, as in one direction only
Half Duplex: Data can be transmitted in only one way at a time.
Full Duplex: Data can be transmitted in both ways at a time


Analog to Digital Conversion

Resolutions:
    n-bit    n-steps    step-size
    8-bit    256        5v / 256    = 19.53mV
    10-bit   1024       5v / 1024   = 4.88mV
    12-bit   4096       5v / 4096   = 12.mv
    16-bit   65,536     5v / 65,536 = 0.076mV


Systick Transmitter
    24-bit down counter driven by the processor clock. So the maxium start value is 2^24 power, or 0xffffff in hex, or 
16,777,216 in decimal. Popular Systick Registers include Systick Current Value Register (STCVR), which contains the current
count value, Systick Control & Status Register (STCSR), which allows the user to configure the systick clock source, enable/
disable interrupts and enable/disable the systick counter. The Systick Reload Value Register (STRVR) is where the intial count 
value is place.
    With a 16 MHz chips, 16,000,000 cycles are completed per second, or one cycle every 0.0000625 ms, or 625 ns . 

Timer vs. Counter   
A timer uses an internal clock source, like RC, and a counter is externally fed to the CPU. One of the uses for a timer is 
to measure the frequency of an external event. This is called Input Capture Mode. Another use is to control an output waveform,
or to indicate when a period of time has elapsed. The is known as Output Compare Mode. One Pulse Mode or OPM, allows the counter
to be started in repsone to a stimulus and to generate a pulse with a programmable length after a programmable delay. 

Timer Registers
Timer Count Register (TIMx_CNT) shwot he current counter value. Size could be 32-bit or 16-bit depending on timer module used.
Timer Auto-Reload Register (TIMx_ARR); Timer raises a flag and the counter restarts automatically when counter value reaches the
value in the auto-reload register. The counter is an up counter bu default but can be configured as a down. Timer Prescaler Register
(TIMx_PSC) is the prescaler. The prescaler slows down the counting speed of the time by dividing the input clock of the timer. 

Clock Pre-scaling
The system clock is first divided by the bus prescaler, for example, the AHB prescaler. This value is then divided again by the 
HCLK. Then, the APBx bus will divied this value again with another prescaler. Then the TIMx itself will have another prescaler 
that finally determines the value. With each change in the counter, the new value is compared to the value in the auto-reload
register (TIM_ARR) and when the values match a flag is raised and an interrupt occurs. 

Common Timer Terms
*Update Event: When a timeout occurs or how long it takes for a flag to be raised.
*Period: Value loaded into auto-reload register(TIM_ARR)
*Up counter: Counts from zero up to specified value
*Down counter: Counts from value to zero.

Timer Prescaler example:
    Update Event = Timer clock / ((Prescaler+1)(Period+1))

    Timer clock = APB1 clock = 48 MHz
    Prescaler   = TIM_PSC val = 47999 + 1
    Period      = TIm_ARR val = 499 + 1

    Update Event = 48,000,000 / ((47999+1)(499+1)) 2Hz or 0.5 seconds. (In a 4 GHz system, 4Hz is a second)